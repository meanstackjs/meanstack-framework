// Generated by CoffeeScript 1.7.1
var dependable, ect, express, fs, glob, mongoose, path, postrender, utils, _;

express = require('express');

mongoose = require('mongoose');

dependable = require('dependable');

postrender = require('express-postrender');

ect = require('ect');

path = require('path');

glob = require('glob');

fs = require('fs');

_ = require('lodash');

utils = require('./utils');

module.exports = function(projectdir, appdir, appext, config, built) {
  var app, appname, assetfile, assets, chainware, connection, defaults, dir, engine, globdir, k, locals, mean, n, obj, overrides, p, pkg, plugin, plugins, publicdir, regex, relappdir, relprojectdir, router, store, vhost, vhosts, views, _i, _j, _len, _len1, _ref;
  relprojectdir = path.relative(__dirname, projectdir);
  relappdir = path.relative(__dirname, appdir);
  publicdir = path.join(projectdir, 'public');
  if (config != null) {
    overrides = config;
  }
  if (built == null) {
    built = true;
  }
  if (process.env.NODE_ENV == null) {
    process.env.NODE_ENV = 'development';
  }
  pkg = require(path.join(projectdir, 'package.json'));
  appname = pkg.name;
  chainware = require("" + relappdir + "/chainware");
  dir = {
    project: projectdir,
    "public": publicdir,
    app: appdir
  };
  mean = dependable.container();
  mean.register('$mean', mean);
  mean.register('$env', process.env.NODE_ENV);
  mean.register('$dir', dir);
  mean.register('$ext', appext);
  mean.register('$name', appname);
  mean.register('$pkg', pkg);
  mean.register('$assets', {});
  mean.register('$plugins', {});
  config = {};
  config.database = {};
  config.database.uri = 'mongodb://localhost/meanstackjs';
  config.database.options = {};
  config.secret = 'meanstackjs';
  config.mount = '/';
  config.port = 3000;
  config.router = {
    caseSensitive: false,
    strict: false
  };
  config.assets = {};
  config.assets.expiry = 0;
  if (process.env.NODE_ENV === 'production') {
    config.assets.expiry = 1000 * 3600 * 24 * 365;
  }
  config.middleware = {};
  config.middleware['vhosted'] = true;
  config.middleware['compression'] = {
    level: 9
  };
  config.middleware['morgan'] = 'dev';
  config.middleware['cookie-parser'] = true;
  config.middleware['body-parser'] = true;
  config.middleware['express-validator'] = true;
  config.middleware['method-override'] = true;
  config.middleware['express-session'] = {
    key: 'sid'
  };
  config.middleware['connect-mongo'] = {
    collection: 'Session'
  };
  config.middleware['view-helpers'] = true;
  config.middleware['connect-flash'] = true;
  config.middleware['serve-favicon'] = false;
  config.middleware['errorhandler'] = true;
  if (process.env.NODE_ENV === 'production') {
    config.middleware['morgan'] = false;
    config.middleware['errorhandler'] = false;
  }
  config.views = {};
  config.views.dir = path.resolve("" + appdir + "/views/");
  if (process.env.NODE_ENV === 'production') {
    config.views.cache = true;
  } else {
    config.views.cache = false;
  }
  config.views.callback = function(html) {
    return html;
  };
  config.views.extension = 'html';
  mean.register('$config', config);
  if (chainware.config != null) {
    mean.resolve(chainware.config);
  }
  config = mean.get('$config');
  if (overrides != null) {
    defaults = _.partialRight(_.assign, function(a, b) {
      if (a == null) {
        return b;
      }
      return a;
    });
    config = defaults(overrides, config);
  }
  if (config.mount[config.mount.length - 1] !== '/') {
    config.mount += '/';
  }
  if (config.middleware['cookie-parser']) {
    config.middleware['cookie-parser'] = config.secret;
  }
  if (config.middleware['express-session']) {
    config.middleware['express-session']['secret'] = config.secret;
  }
  if (_.size(config.database.options) > 0) {
    connection = mongoose.createConnection(config.database.uri, config.database.options);
  } else {
    connection = mongoose.createConnection(config.database.uri);
  }
  mean.register('$connection', connection);
  mean.register('$mongoose', mongoose);
  if (config.middleware['express-session'] && config.middleware['connect-mongo']) {
    if (_.isBoolean(config.middleware['connect-mongo'])) {
      config.middleware['connect-mongo'] = {};
    }
    config.middleware['connect-mongo']['db'] = connection.db;
    store = new (require('connect-mongo')(require('express-session')))(config.middleware['connect-mongo']);
    if (_.isBoolean(config.middleware['express-session'])) {
      config.middleware['express-session'] = {};
    }
    config.middleware['express-session']['store'] = store;
  }
  if (chainware.beforeApp != null) {
    mean.resolve(chainware.beforeApp);
  }
  app = express();
  if (config.router.strict) {
    app.enable('strict routing');
  }
  if (config.router.caseSensitive) {
    app.enable('case sensitive routing');
  }
  mean.register('$app', function() {
    return app;
  });
  if (config.views.render == null) {
    if (config.views.cache) {
      engine = ect({
        watch: true,
        cache: true,
        root: config.views.dir,
        ext: "." + config.views.extension
      });
      app.locals.cache = 'memory';
    } else {
      engine = ect({
        watch: false,
        cache: false,
        root: config.views.dir,
        ext: "." + config.views.extension
      });
      app.locals.cache = false;
    }
    config.views.render = engine.render;
  }
  app.set('view cache', config.views.cache);
  app.set('views', config.views.dir);
  views = {};
  config.views = postrender(config.views, config.views.callback, 'render');
  app.set('view engine', config.views.extension);
  app.engine(config.views.extension, config.views.render);
  globdir = path.resolve("" + config.views.dir + "/**/*." + config.views.extension);
  glob(globdir, {
    sync: true
  }, function(err, files) {
    var file, renderer, _i, _len, _results;
    if (err) {
      console.log(err);
      process.exit(0);
    }
    _results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      renderer = new utils.Renderer(file, config.views.render, config.views.cache, app.locals);
      _results.push(utils.aggregate(views, file, config.views.dir, renderer));
    }
    return _results;
  });
  mean.register('$views', views);
  dir = path.resolve("" + appdir + "/models");
  glob("" + appdir + "/models/**/*" + appext, {
    sync: true
  }, function(err, files) {
    var file, i, model, name, names, schema, _i, _len, _results;
    if (err) {
      console.log(err);
      process.exit(0);
    }
    names = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      name = path.basename(file).replace(path.extname(file), '').replace(/[-._]\w/g, function($1) {
        return $1[1].toUpperCase();
      });
      name = name[0].toUpperCase() + name.substr(1);
      names.push(name);
      schema = require(file).schema;
      mean.register(name + 'Schema', schema);
    }
    for (i in files) {
      file = files[i];
      schema = mean.get(names[i] + 'Schema');
      mean.register(names[i] + 'Schema', function() {
        return schema;
      });
    }
    for (i in files) {
      file = files[i];
      model = require(file).model;
      mean.register(names[i] + 'Model', model);
    }
    _results = [];
    for (i in files) {
      file = files[i];
      model = mean.get(names[i] + 'Model');
      _results.push(mean.register(names[i] + 'Model', function() {
        return model;
      }));
    }
    return _results;
  });
  dir = path.resolve("" + appdir + "/controllers");
  glob("" + appdir + "/controllers/**/*" + appext, {
    sync: true
  }, function(err, files) {
    var controller, file, i, name, names, _i, _len, _results;
    if (err) {
      console.log(err);
      process.exit(0);
    }
    names = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      name = path.basename(file).replace(path.extname(file), '').replace(/[-._]\w/g, function($1) {
        return $1[1].toUpperCase();
      });
      name = name[0].toUpperCase() + name.substr(1);
      names.push(name);
      controller = require(file);
      mean.register(name + 'Ctrl', require(file));
    }
    _results = [];
    for (i in files) {
      file = files[i];
      controller = mean.get(names[i] + 'Ctrl');
      _results.push(mean.register(names[i] + 'Ctrl', function() {
        return controller;
      }));
    }
    return _results;
  });
  plugins = {};
  if (built) {
    vhosts = mean.resolve(require(path.join(projectdir, "vhosts" + appext)));
    regex = /\//;
    for (_i = 0, _len = vhosts.length; _i < _len; _i++) {
      vhost = vhosts[_i];
      if (vhost.plugin != null) {
        vhost = _.assign({
          paths: []
        }, vhost);
        if (!_.isArray(vhost.paths)) {
          vhost.paths = [vhost.paths];
        }
        if (vhost.paths.length === 0) {
          vhost.paths.push('/');
        }
        if (regex.test(vhost.plugin)) {
          vhost.plugin = path.join(relprojectdir, vhost.plugin);
        } else {
          vhost.plugin = path.join(relprojectdir, 'node_modules', vhost.plugin);
        }
        plugin = require(vhost.plugin)(mean, vhost.config);
        plugins[plugin.appname] = {};
        plugins[plugin.appname]['router'] = plugin.router;
        plugins[plugin.appname]['paths'] = vhost.paths;
      }
    }
  }
  if (chainware.beforeMiddleware != null) {
    mean.resolve(chainware.beforeMiddleware);
  }
  assets = mean.get('$assets');
  assetfile = path.join(projectdir, '.assets');
  if (fs.existsSync(assetfile)) {
    assets[appname] = JSON.parse(fs.readFileSync(assetfile));
  } else {
    assets[appname] = {
      js: {},
      css: {},
      other: {}
    };
  }
  locals = {};
  locals.name = appname;
  locals.assets = assets;
  locals.mount = config.mount;
  locals[appname] = {};
  locals[appname].name = appname;
  locals[appname].assets = assets[appname];
  locals[appname].module = function(str) {
    return "" + locals[appname].modulename + "." + str;
  };
  locals[appname].asset = function(str) {
    return "public/" + str;
  };
  locals[appname].resource = function(str) {
    return "public/js/" + str;
  };
  for (k in mean.get('$plugins')) {
    locals[k] = {};
    locals[k].name = k;
    locals[k].assets = assets[k];
    locals[k].module = function(str) {
      return "" + locals[k].modulename + "." + str;
    };
    locals[k].asset = function(str) {
      return "public/plugins/" + k + "/" + str;
    };
    locals[k].resource = function(str) {
      return "public/plugins/" + k + "/js/" + str;
    };
  }
  app.use(function(req, res, next) {
    res.removeHeader('X-Powered-By');
    res.locals['mean'] = locals;
    return next();
  });
  if (chainware.beforeCompression != null) {
    mean.resolve(chainware.beforeCompression);
  }
  if (config.middleware['compression']) {
    if (!_.isBoolean(config.middleware['compression'])) {
      app.use(require('compression')(config.middleware['compression']));
    } else {
      app.use(require('compression')());
    }
  }
  if (chainware.afterCompression != null) {
    mean.resolve(chainware.afterCompression);
  }
  if (chainware.beforeMorgan != null) {
    mean.resolve(chainware.beforeMorgan);
  }
  if (config.middleware['morgan']) {
    if (!_.isBoolean(config.middleware['morgan'])) {
      app.use(require('morgan')(config.middleware['morgan']));
    } else {
      app.use(require('morgan')());
    }
  }
  if (chainware.afterMorgan != null) {
    mean.resolve(chainware.afterMorgan);
  }
  if (chainware.beforeServeFavicon != null) {
    mean.resolve(chainware.beforeServeFavicon);
  }
  if (config.middleware['serve-favicon']) {
    if (!_.isBoolean(config.middleware['serve-favicon'])) {
      app.use(require('serve-favicon')("" + publicdir + "/favicon.ico", config.middleware['serve-favicon']));
    } else {
      app.use(require('serve-favicon')("" + publicdir + "/favicon.ico"));
    }
  }
  if (chainware.afterServeFavicon != null) {
    mean.resolve(chainware.afterServeFavicon);
  }
  if (chainware.beforeStatic != null) {
    mean.resolve(chainware.beforeStatic);
  }
  app.use('/public', express["static"](path.join(projectdir, 'public'), {
    maxAge: config.assets.expiry
  }));
  if (chainware.afterStatic != null) {
    mean.resolve(chainware.afterStatic);
  }
  if (chainware.beforeCookieParser != null) {
    mean.resolve(chainware.beforeCookieParser);
  }
  if (config.middleware['cookie-parser']) {
    if (!_.isBoolean(config.middleware['cookie-parser'])) {
      app.use(require('cookie-parser')(config.middleware['cookie-parser']));
    } else {
      app.use(require('cookie-parser')());
    }
  }
  if (chainware.afterCookieParser != null) {
    mean.resolve(chainware.afterCookieParser);
  }
  if (chainware.beforeBodyParser != null) {
    mean.resolve(chainware.beforeBodyParser);
  }
  if (config.middleware['body-parser']) {
    app.use(require('body-parser')());
  }
  if (chainware.afterBodyParser != null) {
    mean.resolve(chainware.afterBodyParser);
  }
  if (chainware.beforeExpressValidator != null) {
    mean.resolve(chainware.beforeExpressValidator);
  }
  if (config.middleware['express-validator']) {
    if (!_.isBoolean(config.middleware['express-validator'])) {
      app.use(require('express-validator')(config.middleware['express-validator']));
    } else {
      app.use(require('express-validator')());
    }
  }
  if (chainware.afterExpressValidator != null) {
    mean.resolve(chainware.afterExpressValidator);
  }
  if (chainware.beforeMethodOverride != null) {
    mean.resolve(chainware.beforeMethodOverride);
  }
  if (config.middleware['method-override']) {
    app.use(require('method-override')());
  }
  if (chainware.afterMethodOverride != null) {
    mean.resolve(chainware.afterMethodOverride);
  }
  if (chainware.beforeExpressSession != null) {
    mean.resolve(chainware.beforeExpressSession);
  }
  if (config.middleware['express-session']) {
    if (!_.isBoolean(config.middleware['express-session'])) {
      app.use(require('express-session')(config.middleware['express-session']));
    } else {
      app.use(require('express-session')());
    }
  }
  if (chainware.afterExpressSession != null) {
    mean.resolve(chainware.afterExpressSession);
  }
  if (chainware.beforeViewHelpers != null) {
    mean.resolve(chainware.beforeViewHelpers);
  }
  if (config.middleware['view-helpers']) {
    app.use(require('view-helpers')(appname));
  }
  if (chainware.afterViewHelpers != null) {
    mean.resolve(chainware.afterViewHelpers);
  }
  if (chainware.beforeConnectFlash != null) {
    mean.resolve(chainware.beforeConnectFlash);
  }
  if (config.middleware['connect-flash']) {
    app.use(require('connect-flash')());
  }
  if (chainware.afterConnectFlash != null) {
    mean.resolve(chainware.afterConnectFlash);
  }
  if (chainware.beforeRouting != null) {
    mean.resolve(chainware.beforeRouting);
  }
  router = express.Router(config.router);
  router.get('/mean.json', function(req, res) {
    var obj;
    obj = {};
    obj['name'] = appname.replace(/[.-_]/g, '.');
    obj['mount'] = config.mount;
    obj['assets'] = assets;
    return res.json(obj);
  });
  mean.register('$router', function() {
    return router;
  });
  if (chainware.beforePluginsRouting != null) {
    mean.resolve(chainware.beforePluginsRouting);
  }
  for (n in plugins) {
    obj = plugins[n];
    _ref = obj.paths;
    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
      p = _ref[_j];
      app.use(p, obj.router);
    }
  }
  if (chainware.afterPluginsRouting != null) {
    mean.resolve(chainware.afterPluginsRouting);
  }
  glob("" + appdir + "/routes/**/*" + appext, {
    sync: true
  }, function(err, files) {
    var file, _k, _len2, _results;
    if (err) {
      console.log(err);
      process.exit(0);
    }
    _results = [];
    for (_k = 0, _len2 = files.length; _k < _len2; _k++) {
      file = files[_k];
      _results.push(mean.resolve({
        '$route': express.Router(config.router)
      }, require(file)));
    }
    return _results;
  });
  app.use(router);
  if (chainware.afterRouting != null) {
    mean.resolve(chainware.afterRouting);
  }
  if (chainware.afterMiddleware != null) {
    mean.resolve(chainware.afterMiddleware);
  }
  if (chainware.beforeErrorHandler != null) {
    mean.resolve(chainware.beforeErrorHandler);
  }
  if (config.middleware['errorhandler']) {
    app.use(require('errorhandler')());
  }
  if (chainware.afterErrorHandler != null) {
    mean.resolve(chainware.afterErrorHandler);
  }
  if (chainware.afterApp != null) {
    mean.resolve(chainware.afterApp);
  }
  return mean;
};

module.exports.grunt = function(projectdir, grunt) {
  return require('./grunt')(projectdir, grunt);
};
