// Generated by CoffeeScript 1.7.1
var Renderer, aggregate, dependable, emitter, events, fs, glob, injectors, path, postrender, resolve, vhosted, _;

dependable = require('dependable');

postrender = require('postrender');

path = require('path');

glob = require('glob');

events = require('events');

vhosted = require('vhosted');

fs = require('fs');

_ = require('lodash');

Renderer = (function() {
  function Renderer(filename, renderer, cache, locals) {
    this.filename = filename;
    this.renderer = renderer;
    this.cache = cache;
    this.locals = locals;
    return;
  }

  Renderer.prototype.render = function(req, res, options, fn) {
    var err, opts;
    options = options || {};
    if (_.isFunction(options)) {
      fn = options;
      options = {};
    }
    fn = fn || function(err, str) {
      if (err) {
        return req.next(err);
      }
      res.send(str);
    };
    opts = {};
    opts = _.assign(opts, this.locals);
    opts = _.assign(opts, res.locals);
    opts = _.assign(opts, options);
    opts.cache = opts.cache == null ? this.cache : opts.cache;
    opts.filename = this.filename;
    try {
      this.renderer(this.filename, opts, fn);
    } catch (_error) {
      err = _error;
      fn(err);
    }
  };

  return Renderer;

})();

aggregate = function(collection, file, dir, value) {
  var chunks, cursor, i, _i, _ref, _results;
  chunks = path.relative(dir, file.replace(/\.[^.]+$/, '')).split(path.sep);
  cursor = collection;
  _results = [];
  for (i = _i = 0, _ref = chunks.length - 1; _i <= _ref; i = _i += 1) {
    if (i < chunks.length - 1) {
      if (cursor[chunks[i]] == null) {
        _results.push(cursor = cursor[chunks[i]] = {});
      } else {
        _results.push(cursor = cursor[chunks[i]]);
      }
    } else {
      _results.push(cursor[chunks[i]] = value);
    }
  }
  return _results;
};

resolve = function(injector, prop, key) {
  var args, construct, create, e, filter, get, i, l, match, overrides, r, singleton, tmp, wrap;
  filter = function(instance) {
    return instance;
  };
  wrap = function(instance) {
    return function() {
      return instance;
    };
  };
  get = function(instance) {
    return function() {
      var k, r, v;
      for (k in injectors) {
        v = injectors[k];
        if (instance.substring(0, k.length).replace('.', '-') === k) {
          r = instance.substring(k.length + 1);
          if (r.length > 0) {
            return v.get(r);
          }
        }
      }
      return injector.get(instance);
    };
  };
  construct = function(key, instance, args) {
    return function() {
      injector.register(key, construct(key, instance, args));
      return instance.construct(args);
    };
  };
  create = function(key, instance, args) {
    return function() {
      injector.register(key, create(key, instance, args));
      return injector.get(instance, args);
    };
  };
  if (_.isArray(prop) && prop.length > 0 && _.isFunction(prop[prop.length - 1])) {
    if (prop.length > 1) {
      tmp = prop.splice(0, prop.length - 1);
      prop = prop[0];
      prop.inject = tmp;
    } else {
      prop = prop[0];
    }
  }
  if (prop.singleton != null) {
    singleton = prop.singleton;
  } else {
    singleton = true;
  }
  if (_.isFunction(prop)) {
    if ((prop.inject != null) || prop.name.length > 0) {
      overrides = {};
      match = prop.toString().match(/function.*?\(([\s\S]*?)\)/);
      if (match == null) {
        throw new Error("could not parse function arguments: " + (prop != null ? prop.toString() : void 0));
      }
      args = match[1].split(",").filter(filter).map(function(str) {
        return str.trim();
      });
      if (prop.inject == null) {
        prop.inject = args;
      }
      if (prop.name.length > 0) {
        prop.construct = function(a) {
          var fconstructor, nconstructor;
          fconstructor = prop;
          nconstructor = function() {
            return fconstructor.apply(this, a);
          };
          nconstructor.prototype = fconstructor.prototype;
          return new nconstructor();
        };
      }
      for (i in args) {
        r = args[i];
        overrides[r] = get(prop.inject[i]);
      }
    }
  }
  if (prop.inject != null) {
    if (key != null) {
      if (prop.name.length > 0) {
        injector.register("__" + key, wrap(prop));
      } else {
        injector.register("__" + key, prop);
      }
      return injector.register(key, function() {
        var e, l, res;
        if (prop.name.length > 0) {
          args = [];
          for (l in overrides) {
            e = overrides[l];
            args.push(e());
          }
          if (singleton) {
            res = injector.get("__" + key).construct(args);
            injector.register(key, wrap(res));
          } else {
            res = construct(key, injector.get("__" + key), args)();
          }
        } else {
          for (l in overrides) {
            e = overrides[l];
            overrides[l] = e();
          }
          if (singleton) {
            res = injector.get("__" + key, overrides);
            injector.register(key, wrap(res));
          } else {
            res = create(key, "__" + key, overrides)();
          }
        }
        return res;
      });
    } else {
      if (prop.name.length > 0) {
        args = [];
        for (l in overrides) {
          e = overrides[l];
          args.push(e());
        }
        return prop.construct(args);
      } else {
        for (l in overrides) {
          e = overrides[l];
          overrides[l] = e();
        }
        return injector.resolve(overrides, prop);
      }
    }
  } else {
    if (singleton) {
      return injector.register(key, prop);
    } else {
      injector.register("__" + key, prop);
      return injector.register(key, function() {
        return create(key, "__" + key, {})();
      });
    }
  }
};

injectors = {};

emitter = new events.EventEmitter();

if (process.env.NODE_ENV == null) {
  process.env.NODE_ENV = 'development';
}

module.exports.glob = glob;

module.exports.load = function(projectDir, appDir, ext) {
  var app, assetFile, assets, chainware, config, dir, express, init, injector, load, mongoose, name, pkg, publicDir, relativeAppDir, relativeProjectDir, router, swig, _ref, _ref1, _ref2;
  appDir = path.resolve(appDir);
  relativeProjectDir = path.relative(__dirname, projectDir);
  relativeAppDir = path.relative(__dirname, appDir);
  pkg = require(path.join(projectDir, 'package.json'));
  name = path.basename(appDir);
  publicDir = path.join(projectDir, 'public');
  dir = {
    project: projectDir,
    "public": publicDir,
    vhosts: "" + projectDir + "/vhosts",
    app: appDir
  };
  if (fs.existsSync("" + appDir + "/server/app" + ext)) {
    chainware = require("" + relativeAppDir + "/server/app");
  }
  injector = dependable.container();
  injectors[name] = injector;
  injector.register('$injectors', injectors);
  if (((_ref = pkg.dependencies) != null ? _ref['mongoose'] : void 0) != null) {
    mongoose = require("" + relativeProjectDir + "/node_modules/mongoose");
    injector.register('$mongoose', function() {
      return mongoose;
    });
  }
  if (((_ref1 = pkg.dependencies) != null ? _ref1['swig'] : void 0) != null) {
    swig = require("" + relativeProjectDir + "/node_modules/swig");
    injector.register('$swig', function() {
      return swig;
    });
  }
  if (((_ref2 = pkg.dependencies) != null ? _ref2['express'] : void 0) != null) {
    express = require("" + relativeProjectDir + "/node_modules/express");
    injector.register('$express', function() {
      return express;
    });
  }
  injector.register('$dependable', function() {
    return dependable;
  });
  injector.register('$glob', function() {
    return glob;
  });
  injector.register('$lodash', function() {
    return _;
  });
  injector.register('$injector', injector);
  injector.register('$env', process.env.NODE_ENV);
  injector.register('$dir', dir);
  injector.register('$pkg', pkg);
  injector.register('$ext', ext);
  injector.register('$name', name);
  injector.register('$assets', {
    js: {},
    css: {},
    other: {}
  });
  injector.register('$mount', '/', config = {});
  config.database = {};
  config.database.uri = 'mongodb://localhost/meanstackjs';
  config.database.options = {};
  config.secret = 'meanstackjs';
  config.mount = '/';
  config.port = 3000;
  config.router = {
    caseSensitive: false,
    strict: false
  };
  config["static"] = {};
  config["static"].expiry = 0;
  if (process.env.NODE_ENV === 'production') {
    config["static"].expiry = 1000 * 3600 * 24 * 365;
  }
  config.middleware = {};
  config.middleware['vhosted'] = true;
  config.middleware['compression'] = {
    threshold: 0,
    level: 9
  };
  config.middleware['cookie-parser'] = true;
  config.middleware['body-parser'] = true;
  config.middleware['express-validator'] = true;
  config.middleware['method-override'] = true;
  config.middleware['express-session'] = {
    key: 'sid'
  };
  config.middleware['connect-mongo'] = true;
  config.middleware['view-helpers'] = true;
  config.middleware['connect-flash'] = true;
  config.middleware['serve-favicon'] = false;
  config.middleware['errorhandler'] = true;
  if (process.env.NODE_ENV === 'production') {
    config.middleware['errorhandler'] = false;
  }
  config.views = {};
  config.views.dir = path.resolve("" + appDir + "/server/");
  if (process.env.NODE_ENV === 'production') {
    config.views.cache = true;
  } else {
    config.views.cache = false;
  }
  config.views.callback = function(html) {
    return html;
  };
  config.views.extension = 'html';
  injector.register('$config', config);
  if ((chainware != null ? chainware.config : void 0) != null) {
    injector.resolve(chainware.config);
  }
  assetFile = path.join(publicDir, 'assets.json');
  if (fs.existsSync(assetFile)) {
    assets = JSON.parse(fs.readFileSync(assetFile));
    injector.register('$assets', assets);
  }
  assets = injector.get('$assets');
  if (express != null) {
    app = express();
    injector.register('$app', function() {
      return app;
    });
    router = express.Router(config.router);
    injector.register('$router', function() {
      return router;
    });
    injector.register('$route', function() {
      return express.Router(config.router);
    });
  }
  injector.register('__route', function() {
    return function() {
      if ((chainware != null ? chainware.main : void 0) != null) {
        return resolve(injector, chainware.main);
      }
    };
  });
  load = function() {
    var connected, connection, engine, globDir, views;
    if (config.mount[config.mount.length - 1] !== '/') {
      config.mount += '/';
    }
    if (express != null) {
      app.locals.assets = assets;
      app.locals.mount = config.mount;
      app.locals.name = name;
    }
    if ((chainware != null ? chainware.load : void 0) != null) {
      injector.resolve(chainware.load);
    }
    if (config.middleware['cookie-parser']) {
      config.middleware['cookie-parser'] = config.secret;
    }
    if (config.middleware['express-session']) {
      config.middleware['express-session']['secret'] = config.secret;
    }
    injector.register('$emitter', function() {
      return emitter;
    });
    connected = function() {
      return emitter.emit('connected');
    };
    if (mongoose != null) {
      if (_.size(config.database.options) > 0) {
        connection = mongoose.createConnection(config.database.uri, config.database.options, connected);
      } else {
        connection = mongoose.createConnection(config.database.uri, connected);
      }
      injector.register('$connection', function() {
        return connection;
      });
    } else {
      connected();
    }
    if (express != null) {
      if ((config.views.render == null) && (swig != null)) {
        if (config.views.cache) {
          engine = new swig.Swig({
            loader: swig.loaders.fs(config.views.dir),
            cache: 'memory'
          });
          app.locals.cache = 'memory';
        } else {
          engine = new swig.Swig({
            loader: swig.loaders.fs(config.views.dir),
            cache: false
          });
          app.locals.cache = false;
        }
        config.views.render = engine.renderFile;
      }
      if (config.views.render != null) {
        app.set('view cache', config.views.cache);
        app.set('views', config.views.dir);
        views = {};
        config.views = postrender(config.views, config.views.callback, 'render');
        app.set('view engine', config.views.extension);
        app.engine(config.views.extension, config.views.render);
        globDir = path.resolve("" + config.views.dir + "/**/*." + config.views.extension);
        glob(globDir, {
          sync: true
        }, function(err, files) {
          var file, renderer, _i, _len, _results;
          if (err) {
            console.log(err);
            process.exit(0);
          }
          _results = [];
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            file = files[_i];
            renderer = new Renderer(file, config.views.render, config.views.cache, app.locals);
            _results.push(aggregate(views, file, config.views.dir, renderer));
          }
          return _results;
        });
        injector.register('$views', views);
      }
    }
    glob("" + appDir + "/server/**/*" + ext, {
      sync: true
    }, function(err, files) {
      var file, mdl, ns, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        if (path.relative(appDir, file) === ("app" + ext)) {
          continue;
        }
        mdl = require(file);
        if (mdl.namespace != null) {
          ns = mdl.namespace;
        } else {
          ns = '';
        }
        if ((mdl.register != null) && mdl.register === false) {
          continue;
        }
        _results.push(_.forOwn(mdl, function(prop, key) {
          if ((prop.register != null) && prop.register === false || key === 'namespace') {
            return;
          }
          if (ns.length > 0) {
            key = "" + ns + "." + key;
          }
          if (prop.namespace != null) {
            key = "" + prop.namespace + "." + key;
          }
          return resolve(injector, prop, key);
        }));
      }
      return _results;
    });
    if ((chainware != null ? chainware.init : void 0) != null) {
      return injector.resolve(chainware.init);
    }
  };
  init = function() {
    var cm, es, m, mount, store, _ref10, _ref11, _ref12, _ref13, _ref14, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    if (express == null) {
      return injector;
    }
    if ((((_ref3 = pkg.dependencies) != null ? _ref3['connect-mongo'] : void 0) != null) && (((_ref4 = pkg.dependencies) != null ? _ref4['express-session'] : void 0) != null)) {
      if (config.middleware['express-session'] && config.middleware['connect-mongo']) {
        if (_.isBoolean(config.middleware['connect-mongo'])) {
          config.middleware['connect-mongo'] = {};
        }
        config.middleware['connect-mongo']['db'] = injector.get('$connection').db;
        cm = require("" + relativeProjectDir + "/node_modules/connect-mongo");
        es = require("" + relativeProjectDir + "/node_modules/express-session");
        store = new (cm(es))(config.middleware['connect-mongo']);
        if (_.isBoolean(config.middleware['express-session'])) {
          config.middleware['express-session'] = {};
        }
        config.middleware['express-session']['store'] = store;
      }
    }
    if (config.router.strict) {
      app.enable('strict routing');
    }
    if (config.router.caseSensitive) {
      app.enable('case sensitive routing');
    }
    if ((chainware != null ? chainware.middleware : void 0) != null) {
      injector.resolve(chainware.middlware);
    }
    app.use(function(req, res, next) {
      res.removeHeader('X-Powered-By');
      return next();
    });
    if ((chainware != null ? chainware['compression'] : void 0) != null) {
      injector.resolve(chainware['compression']);
    }
    if ((((_ref5 = pkg.dependencies) != null ? _ref5['compression'] : void 0) != null) && config.middleware['compression']) {
      m = require("" + relativeProjectDir + "/node_modules/compression");
      if (!_.isBoolean(config.middleware['compression'])) {
        app.use(m(config.middleware['compression']));
      } else {
        app.use(m());
      }
    }
    if ((chainware != null ? chainware['serve-favicon'] : void 0) != null) {
      injector.resolve(chainware['compression']);
    }
    if ((((_ref6 = pkg.dependencies) != null ? _ref6['serve-favicon'] : void 0) != null) && config.middleware['serve-favicon']) {
      m = require("" + relativeProjectDir + "/node_modules/serve-favicon");
      if (!_.isBoolean(config.middleware['serve-favicon'])) {
        app.use(m("" + publicDir + "/favicon.ico", config.middleware['serve-favicon']));
      } else {
        app.use(m("" + publicDir + "/favicon.ico"));
      }
    }
    if ((chainware != null ? chainware["static"] : void 0) != null) {
      injector.resolve(chainware["static"]);
    }
    dir = injector.get('$dir');
    app.use("/public", express["static"](dir["public"], {
      maxAge: config["static"].expiry
    }));
    if ((chainware != null ? chainware['cookie-parser'] : void 0) != null) {
      injector.resolve(chainware['cookie-parser']);
    }
    if ((((_ref7 = pkg.dependencies) != null ? _ref7['cookie-parser'] : void 0) != null) && config.middleware['cookie-parser']) {
      m = require("" + relativeProjectDir + "/node_modules/cookie-parser");
      if (!_.isBoolean(config.middleware['cookie-parser'])) {
        app.use(m(config.middleware['cookie-parser']));
      } else {
        app.use(m());
      }
    }
    if ((chainware != null ? chainware['body-parser'] : void 0) != null) {
      injector.resolve(chainware['body-parser']);
    }
    if ((((_ref8 = pkg.dependencies) != null ? _ref8['body-parser'] : void 0) != null) && config.middleware['body-parser']) {
      m = require("" + relativeProjectDir + "/node_modules/body-parser");
      app.use(m());
    }
    if ((chainware != null ? chainware['express-validator'] : void 0) != null) {
      injector.resolve(chainware['express-validator']);
    }
    if ((((_ref9 = pkg.dependencies) != null ? _ref9['express-validator'] : void 0) != null) && config.middleware['express-validator']) {
      m = require("" + relativeProjectDir + "/node_modules/express-validator");
      if (!_.isBoolean(config.middleware['express-validator'])) {
        app.use(m(config.middleware['express-validator']));
      } else {
        app.use(m());
      }
    }
    if ((chainware != null ? chainware['method-override'] : void 0) != null) {
      injector.resolve(chainware['method-override']);
    }
    if ((((_ref10 = pkg.dependencies) != null ? _ref10['method-override'] : void 0) != null) && config.middleware['method-override']) {
      m = require("" + relativeProjectDir + "/node_modules/method-override");
      app.use(m());
    }
    if ((chainware != null ? chainware['express-session'] : void 0) != null) {
      injector.resolve(chainware['express-session']);
    }
    if ((((_ref11 = pkg.dependencies) != null ? _ref11['express-session'] : void 0) != null) && config.middleware['express-session']) {
      m = require("" + relativeProjectDir + "/node_modules/express-session");
      if (!_.isBoolean(config.middleware['express-session'])) {
        app.use(m(config.middleware['express-session']));
      } else {
        app.use(m());
      }
    }
    if ((chainware != null ? chainware['view-helpers'] : void 0) != null) {
      injector.resolve(chainware['view-helpers']);
    }
    if ((((_ref12 = pkg.dependencies) != null ? _ref12['view-helpers'] : void 0) != null) && config.middleware['view-helpers']) {
      m = require("" + relativeProjectDir + "/node_modules/view-helpers");
      app.use(m(name));
    }
    if ((chainware != null ? chainware['connect-flash'] : void 0) != null) {
      injector.resolve(chainware['connect-flash']);
    }
    if ((((_ref13 = pkg.dependencies) != null ? _ref13['connect-flash'] : void 0) != null) && config.middleware['connect-flash']) {
      m = require("" + relativeProjectDir + "/node_modules/connect-flash");
      app.use(m());
    }
    if ((chainware != null ? chainware.dependencies : void 0) != null) {
      injector.resolve(chainware.dependencies);
    }
    injector.get('__route')();
    mount = injector.get('$mount');
    app.use(mount, injector.get('$router'));
    if ((chainware != null ? chainware['errorhandler'] : void 0) != null) {
      injector.resolve(chainware['errorhandler']);
    }
    if ((((_ref14 = pkg.dependencies) != null ? _ref14['errorhandler'] : void 0) != null) && config.middleware['errorhandler']) {
      m = require("" + relativeProjectDir + "/node_modules/errorhandler");
      app.use(m());
    }
    if ((chainware != null ? chainware.run : void 0) != null) {
      injector.resolve(chainware.run);
    }
    return injector;
  };
  return {
    injector: injector,
    load: load,
    init: init
  };
};

module.exports.server = function(projectDir, ext) {
  var bootstrap, dest, listen, pkg, relativeProjectDir, server, vhosts, _ref;
  relativeProjectDir = path.relative(__dirname, projectDir);
  pkg = require(path.join(projectDir, 'package.json'));
  if (((_ref = pkg.dependencies) != null ? _ref['express'] : void 0) != null) {
    server = require("" + relativeProjectDir + "/node_modules/express")();
  } else {
    return;
  }
  if (ext !== 'js') {
    dest = 'src';
  } else {
    dest = 'lib';
  }
  bootstrap = fs.existsSync("" + projectDir + "/" + dest + "/main" + ext);
  if (!bootstrap) {
    return;
  }
  bootstrap = require("" + relativeProjectDir + "/" + dest + "/main");
  if (bootstrap.vhosts == null) {
    return;
  }
  vhosts = bootstrap.vhosts(injectors, projectDir);
  server = vhosted(server, projectDir, vhosts);
  listen = function() {
    var http, port;
    if (bootstrap.server != null) {
      server = bootstrap.server(server, injectors, projectDir);
    } else {
      http = require('http');
      port = process.env.PORT || 3000;
      server = http.createServer(server).listen(port, function() {
        return console.log('Server listening on port ' + port);
      });
    }
    if (server != null) {
      return server.on('listening', function() {
        return fs.writeFileSync("" + projectDir + "/.tmp/reload", 'reload');
      });
    }
  };
  if (process.env.NODE_ENV === 'production') {
    return emitter.on('connected', function() {
      return listen();
    });
  } else {
    return listen();
  }
};

module.exports.init = function(projectDir, ext, apps) {
  var app, bootstrap, dest, name, relativeProjectDir, _results;
  relativeProjectDir = path.relative(__dirname, projectDir);
  if (ext !== 'js') {
    dest = 'src';
  } else {
    dest = 'lib';
  }
  bootstrap = fs.existsSync("" + projectDir + "/" + dest + "/main" + ext);
  if (!bootstrap) {
    return;
  }
  bootstrap = require("" + relativeProjectDir + "/" + dest + "/main");
  if (bootstrap.config != null) {
    bootstrap.config(injectors, projectDir);
  }
  _results = [];
  for (name in apps) {
    app = apps[name];
    app.load();
    _results.push(app.init());
  }
  return _results;
};
