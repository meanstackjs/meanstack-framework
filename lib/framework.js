// Generated by CoffeeScript 1.7.1
var Renderer, aggregate, connections, containers, dependable, emitter, events, fs, glob, injectors, load, path, postrender, resolve, vhosted, _;

require('source-map-support').install();

dependable = require('dependable');

postrender = require('postrender');

path = require('path');

glob = require('glob');

events = require('events');

vhosted = require('vhosted');

fs = require('fs');

_ = require('lodash');

aggregate = require('./aggregate');

resolve = require('./resolve');

Renderer = require('./renderer');

if (process.env.NODE_ENV == null) {
  process.env.NODE_ENV = 'development';
}

containers = {};

injectors = {};

emitter = new events.EventEmitter();

connections = 0;

emitter.on('connected', function() {
  connections--;
  if (connections === 0) {
    return emitter.emit('listen');
  }
});

load = function(projectDir, appDir, appName) {
  var assetFile, assets, chainware, config, container, dir, express, injector, mongoose, name, pkg, publicDir, srcDir, swig, _ref, _ref1, _ref2;
  pkg = require(path.join(appDir.absolute, 'package.json'));
  name = appName;
  publicDir = path.join(projectDir.absolute, 'public');
  srcDir = path.relative(projectDir.absolute, appDir.absolute).split(path.sep);
  srcDir[0] = 'src';
  srcDir = path.resolve(srcDir.join(path.sep));
  dir = {
    project: projectDir.absolute,
    app: {
      "public": path.join(publicDir, name),
      src: srcDir,
      lib: appDir.absolute
    },
    "public": publicDir
  };
  if (fs.existsSync("" + appDir.absolute + "/server/app.js")) {
    chainware = require("" + appDir.relative + "/server/app");
  }
  container = dependable.container();
  containers[name] = container;
  injector = {
    get: function(name, overrides) {
      if (overrides != null) {
        return container.get(name, overrides);
      }
      return container.get(name);
    },
    register: function(name, fn) {
      return resolve(containers, container, fn, name);
    },
    resolve: function(cb) {
      return resolve(containers, container, cb);
    }
  };
  injectors[name] = injector;
  container.register('$injectors', injectors);
  if (((_ref = pkg.dependencies) != null ? _ref['mongoose'] : void 0) != null) {
    mongoose = require("" + appDir.relative + "/node_modules/mongoose");
    container.register('$mongoose', function() {
      return mongoose;
    });
  }
  if (((_ref1 = pkg.dependencies) != null ? _ref1['swig'] : void 0) != null) {
    swig = require("" + appDir.relative + "/node_modules/swig");
    container.register('$swig', function() {
      return swig;
    });
  }
  if (((_ref2 = pkg.dependencies) != null ? _ref2['express'] : void 0) != null) {
    express = require("" + appDir.relative + "/node_modules/express");
    container.register('$express', function() {
      return express;
    });
  }
  container.register('$injector', injector);
  container.register('$env', process.env.NODE_ENV);
  container.register('$dir', dir);
  container.register('$pkg', pkg);
  container.register('$name', name);
  container.register('$assets', {
    js: {},
    css: {},
    other: {}
  });
  config = {};
  config.database = {};
  config.database.uri = 'mongodb://localhost/meanstackjs';
  config.database.options = {};
  config.secret = 'meanstackjs';
  config.mount = '/';
  config.router = {
    caseSensitive: false,
    strict: false
  };
  config["static"] = {};
  config["static"].expiry = 0;
  if (process.env.NODE_ENV === 'production') {
    config["static"].expiry = 1000 * 3600 * 24 * 365;
  }
  config.middleware = {};
  config.middleware['vhosted'] = true;
  config.middleware['compression'] = {
    threshold: 0,
    level: 9
  };
  config.middleware['cookie-parser'] = true;
  config.middleware['body-parser'] = true;
  config.middleware['express-validator'] = true;
  config.middleware['method-override'] = true;
  config.middleware['express-session'] = {
    key: 'sid'
  };
  config.middleware['connect-mongo'] = true;
  config.middleware['view-helpers'] = true;
  config.middleware['connect-flash'] = true;
  config.middleware['serve-favicon'] = false;
  config.middleware['errorhandler'] = true;
  if (process.env.NODE_ENV === 'production') {
    config.middleware['errorhandler'] = false;
  }
  config.views = {};
  config.views.dir = path.resolve("" + appDir.absolute + "/server/");
  if (process.env.NODE_ENV === 'production') {
    config.views.cache = true;
  } else {
    config.views.cache = false;
  }
  config.views.callback = function(html) {
    return html;
  };
  config.views.extension = 'html';
  container.register('$config', config);
  assetFile = path.join(projectDir.absolute, '.tmp/assets.json');
  if (fs.existsSync(assetFile)) {
    assets = JSON.parse(fs.readFileSync(assetFile));
    container.register('$assets', assets);
  }
  assets = container.get('$assets');
  if ((chainware != null ? chainware.config : void 0) != null) {
    resolve(containers, container, chainware.config);
  }
  return function() {
    var app, cm, connected, connection, engine, es, globDir, m, routeFactory, router, store, views, _ref10, _ref11, _ref12, _ref13, _ref14, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    if (express != null) {
      app = express();
      container.register('$app', function() {
        return app;
      });
      router = express.Router(config.router);
      container.register('$router', function() {
        return router;
      });
      routeFactory = function() {
        return express.Router(config.router);
      };
      routeFactory.singleton = false;
      injector.register('$route', routeFactory);
    }
    if (config.mount[0] !== '/') {
      config.mount = '/' + config.mount;
    }
    if (config.mount[config.mount.length - 1] !== '/') {
      config.mount += '/';
    }
    if (express != null) {
      app.locals.assets = assets;
      app.locals.mount = config.mount;
      app.locals.name = name;
    }
    if (config.middleware['cookie-parser']) {
      config.middleware['cookie-parser'] = config.secret;
    }
    if (config.middleware['express-session']) {
      config.middleware['express-session']['secret'] = config.secret;
    }
    container.register('$emitter', function() {
      return emitter;
    });
    connections++;
    connected = function() {
      return emitter.emit('connected');
    };
    if (mongoose != null) {
      if (_.size(config.database.options) > 0) {
        connection = mongoose.createConnection(config.database.uri, config.database.options, connected);
      } else {
        connection = mongoose.createConnection(config.database.uri, connected);
      }
      container.register('$connection', function() {
        return connection;
      });
    } else {
      connected();
    }
    if ((chainware != null ? chainware.load : void 0) != null) {
      resolve(containers, container, chainware.load);
    }
    if (express != null) {
      if ((config.views.render == null) && (swig != null)) {
        if (config.views.cache) {
          engine = new swig.Swig({
            loader: swig.loaders.fs(config.views.dir),
            cache: 'memory',
            varControls: ['{[', ']}']
          });
          app.locals.cache = 'memory';
        } else {
          engine = new swig.Swig({
            loader: swig.loaders.fs(config.views.dir),
            cache: false,
            varControls: ['{[', ']}']
          });
          app.locals.cache = false;
        }
        config.views.render = engine.renderFile;
      }
      if (config.views.render != null) {
        app.set('view cache', config.views.cache);
        app.set('views', config.views.dir);
        views = {};

        /*
        config.views = postrender(
          config.views,
          config.views.callback,
          'render'
        )
         */
        app.set('view engine', config.views.extension);
        app.engine(config.views.extension, config.views.render);
        globDir = path.resolve("" + config.views.dir + "/**/*." + config.views.extension);
        glob(globDir, {
          sync: true
        }, function(err, files) {
          var file, renderer, _i, _len, _results;
          if (err) {
            console.log(err);
            process.exit(0);
          }
          _results = [];
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            file = files[_i];
            renderer = new Renderer(file, config.views.render, config.views.cache, app.locals);
            _results.push(aggregate(views, file, config.views.dir, renderer));
          }
          return _results;
        });
        container.register('$views', views);
      }
    }
    glob("" + appDir.absolute + "/server/**/*.js", {
      sync: true
    }, function(err, files) {
      var file, mdl, ns, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        if (path.relative(appDir.absolute, file) === "app.js") {
          continue;
        }
        mdl = require(file);
        if ((mdl.register != null) && mdl.register === false) {
          continue;
        }
        if (mdl.namespace != null) {
          ns = mdl.namespace;
        } else {
          ns = '';
        }
        _results.push(_.forOwn(mdl, function(prop, key) {
          if ((prop.register != null) && prop.register === false || key === 'namespace' || key === 'alias') {
            return;
          }
          if (ns.length > 0) {
            key = "" + ns + "." + key;
          }
          if (prop.namespace != null) {
            key = "" + prop.namespace + "." + key;
          }
          return resolve(containers, container, prop, key);
        }));
      }
      return _results;
    });
    if ((chainware != null ? chainware.init : void 0) != null) {
      resolve(containers, container, chainware.init);
    }
    if (express == null) {
      return container;
    }
    if ((((_ref3 = pkg.dependencies) != null ? _ref3['connect-mongo'] : void 0) != null) && (((_ref4 = pkg.dependencies) != null ? _ref4['express-session'] : void 0) != null)) {
      if (config.middleware['express-session'] && config.middleware['connect-mongo']) {
        if (_.isBoolean(config.middleware['connect-mongo'])) {
          config.middleware['connect-mongo'] = {};
        }
        config.middleware['connect-mongo']['db'] = container.get('$connection').db;
        cm = require("" + appDir.relative + "/node_modules/connect-mongo");
        es = require("" + appDir.relative + "/node_modules/express-session");
        store = new (cm(es))(config.middleware['connect-mongo']);
        if (_.isBoolean(config.middleware['express-session'])) {
          config.middleware['express-session'] = {};
        }
        config.middleware['express-session']['store'] = store;
      }
    }
    if (config.router.strict) {
      app.enable('strict routing');
    }
    if (config.router.caseSensitive) {
      app.enable('case sensitive routing');
    }
    if ((chainware != null ? chainware.middleware : void 0) != null) {
      resolve(containers, container, chainware.middleware);
    }
    app.use(function(req, res, next) {
      res.removeHeader('X-Powered-By');
      return next();
    });
    if ((chainware != null ? chainware['compression'] : void 0) != null) {
      container.resolve(chainware['compression']);
    }
    if ((((_ref5 = pkg.dependencies) != null ? _ref5['compression'] : void 0) != null) && config.middleware['compression']) {
      m = require("" + appDir.relative + "/node_modules/compression");
      if (!_.isBoolean(config.middleware['compression'])) {
        app.use(m(config.middleware['compression']));
      } else {
        app.use(m());
      }
    }
    if ((chainware != null ? chainware['serve-favicon'] : void 0) != null) {
      container.resolve(chainware['compression']);
    }
    if ((((_ref6 = pkg.dependencies) != null ? _ref6['serve-favicon'] : void 0) != null) && config.middleware['serve-favicon']) {
      m = require("" + appDir.relative + "/node_modules/serve-favicon");
      if (!_.isBoolean(config.middleware['serve-favicon'])) {
        app.use(m("" + dir.app["public"] + "/favicon.ico", config.middleware['serve-favicon']));
      } else {
        app.use(m("" + dir.app["public"] + "/favicon.ico"));
      }
    }
    if ((chainware != null ? chainware["static"] : void 0) != null) {
      resolve(containers, container, chainware["static"]);
    }
    if (config["static"]) {
      app.use("/public", express["static"]("" + publicDir, {
        maxAge: config["static"].expiry
      }));
    }
    if ((chainware != null ? chainware['cookie-parser'] : void 0) != null) {
      container.resolve(chainware['cookie-parser']);
    }
    if ((((_ref7 = pkg.dependencies) != null ? _ref7['cookie-parser'] : void 0) != null) && config.middleware['cookie-parser']) {
      m = require("" + appDir.relative + "/node_modules/cookie-parser");
      if (!_.isBoolean(config.middleware['cookie-parser'])) {
        app.use(m(config.middleware['cookie-parser']));
      } else {
        app.use(m());
      }
    }
    if ((chainware != null ? chainware['body-parser'] : void 0) != null) {
      container.resolve(chainware['body-parser']);
    }
    if ((((_ref8 = pkg.dependencies) != null ? _ref8['body-parser'] : void 0) != null) && config.middleware['body-parser']) {
      m = require("" + appDir.relative + "/node_modules/body-parser");
      app.use(m());
    }
    if ((chainware != null ? chainware['express-validator'] : void 0) != null) {
      container.resolve(chainware['express-validator']);
    }
    if ((((_ref9 = pkg.dependencies) != null ? _ref9['express-validator'] : void 0) != null) && config.middleware['express-validator']) {
      m = require("" + appDir.relative + "/node_modules/express-validator");
      if (!_.isBoolean(config.middleware['express-validator'])) {
        app.use(m(config.middleware['express-validator']));
      } else {
        app.use(m());
      }
    }
    if ((chainware != null ? chainware['method-override'] : void 0) != null) {
      container.resolve(chainware['method-override']);
    }
    if ((((_ref10 = pkg.dependencies) != null ? _ref10['method-override'] : void 0) != null) && config.middleware['method-override']) {
      m = require("" + appDir.relative + "/node_modules/method-override");
      app.use(m());
    }
    if ((chainware != null ? chainware['express-session'] : void 0) != null) {
      container.resolve(chainware['express-session']);
    }
    if ((((_ref11 = pkg.dependencies) != null ? _ref11['express-session'] : void 0) != null) && config.middleware['express-session']) {
      m = require("" + appDir.relative + "/node_modules/express-session");
      if (!_.isBoolean(config.middleware['express-session'])) {
        app.use(m(config.middleware['express-session']));
      } else {
        app.use(m());
      }
    }
    if ((chainware != null ? chainware['view-helpers'] : void 0) != null) {
      container.resolve(chainware['view-helpers']);
    }
    if ((((_ref12 = pkg.dependencies) != null ? _ref12['view-helpers'] : void 0) != null) && config.middleware['view-helpers']) {
      m = require("" + appDir.relative + "/node_modules/view-helpers");
      app.use(m(name));
    }
    if ((chainware != null ? chainware['connect-flash'] : void 0) != null) {
      container.resolve(chainware['connect-flash']);
    }
    if ((((_ref13 = pkg.dependencies) != null ? _ref13['connect-flash'] : void 0) != null) && config.middleware['connect-flash']) {
      m = require("" + appDir.relative + "/node_modules/connect-flash");
      app.use(m());
    }
    if ((chainware != null ? chainware.dependencies : void 0) != null) {
      container.resolve(chainware.dependencies);
    }
    if ((chainware != null ? chainware.main : void 0) != null) {
      resolve(containers, container, chainware.main);
    }
    app.use('/', container.get('$router'));
    if ((chainware != null ? chainware['errorhandler'] : void 0) != null) {
      container.resolve(chainware['errorhandler']);
    }
    if ((((_ref14 = pkg.dependencies) != null ? _ref14['errorhandler'] : void 0) != null) && config.middleware['errorhandler']) {
      m = require("" + appDir.relative + "/node_modules/errorhandler");
      app.use(m());
    }
    if ((chainware != null ? chainware.run : void 0) != null) {
      resolve(containers, container, chainware.run);
    }
    return container;
  };
};

module.exports.load = function(dirname, filename) {
  var app, apps, main, name, projectDir;
  projectDir = {
    absolute: path.resolve(dirname)
  };
  projectDir.relative = path.relative(__dirname, projectDir.absolute);
  apps = {};
  glob("" + projectDir.absolute + "/lib/*/", {
    sync: true
  }, function(err, appDirs) {
    var appDir, appName, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = appDirs.length; _i < _len; _i++) {
      appDir = appDirs[_i];
      appDir = {
        absolute: path.resolve(appDir)
      };
      appDir.relative = path.relative(__dirname, appDir.absolute);
      appName = path.basename(appDir.absolute);
      _results.push(apps[appName] = load(projectDir, appDir, appName));
    }
    return _results;
  });
  main = fs.existsSync("" + projectDir.absolute + "/lib/main.js");
  if (!main) {
    console.error('Main file not found.');
    process.exit(0);
  }
  main = require("" + projectDir.relative + "/lib/main");
  if (main.config != null) {
    main.config(containers);
  }
  for (name in apps) {
    app = apps[name];
    app();
  }
  return containers;
};

module.exports.listen = function(dirname, filename) {
  var app, connectionsEstablished, listen, main, pkg, projectDir, vhosts, _ref;
  projectDir = {
    absolute: path.resolve(dirname)
  };
  projectDir.relative = path.relative(__dirname, projectDir.absolute);
  connectionsEstablished = 0;
  pkg = require("" + projectDir.relative + "/package.json");
  if (((_ref = pkg.dependencies) != null ? _ref['express'] : void 0) != null) {
    app = require("" + projectDir.relative + "/node_modules/express")();
  } else {
    console.error('Express is not installed.');
    process.exit(0);
  }
  main = fs.existsSync("" + projectDir.absolute + "/lib/main.js");
  if (!main) {
    console.error('Main file not found.');
    process.exit(0);
  }
  main = require("" + projectDir.relative + "/lib/main");
  if (main.vhosts == null) {
    console.error('No virtual hosts specified.');
    process.exit(0);
  }
  vhosts = main.vhosts(containers);
  app = vhosted(app, projectDir.absolute, vhosts);
  listen = function() {
    var http, port, server;
    if (main.server != null) {
      server = main.server(containers, app);
    } else {
      http = require('http');
      port = process.env.PORT || 3000;
      server = http.createServer(app).listen(port, function() {
        return console.log('Server listening on port ' + port);
      });
    }
    if (server != null) {
      return server.on('listening', function() {
        return fs.writeFileSync("" + projectDir.absolute + "/.tmp/reload", 'reload');
      });
    }
  };
  if (connections === 0) {
    return listen();
  } else {
    return emitter.on('listen', function() {
      return listen();
    });
  }
};
