// Generated by CoffeeScript 1.7.1
var Renderer, aggregate, dependable, events, fs, glob, path, postrender, vhosted, _;

dependable = require('dependable');

postrender = require('postrender');

path = require('path');

glob = require('glob');

events = require('events');

vhosted = require('vhosted');

fs = require('fs');

_ = require('lodash');

Renderer = (function() {
  function Renderer(filename, renderer, cache, locals) {
    this.filename = filename;
    this.renderer = renderer;
    this.cache = cache;
    this.locals = locals;
    return;
  }

  Renderer.prototype.render = function(req, res, options, fn) {
    var err, opts;
    options = options || {};
    if (_.isFunction(options)) {
      fn = options;
      options = {};
    }
    fn = fn || function(err, str) {
      if (err) {
        return req.next(err);
      }
      res.send(str);
    };
    opts = {};
    opts = _.assign(opts, this.locals);
    opts = _.assign(opts, res.locals);
    opts = _.assign(opts, options);
    opts.cache = opts.cache == null ? this.cache : opts.cache;
    opts.filename = this.filename;
    try {
      this.renderer(this.filename, opts, fn);
    } catch (_error) {
      err = _error;
      fn(err);
    }
  };

  return Renderer;

})();

aggregate = function(collection, file, dir, value) {
  var chunks, cursor, i, _i, _ref, _results;
  chunks = path.relative(dir, file.replace(/\.[^.]+$/, '')).split(path.sep);
  cursor = collection;
  _results = [];
  for (i = _i = 0, _ref = chunks.length - 1; _i <= _ref; i = _i += 1) {
    if (i < chunks.length - 1) {
      if (collection[chunks[i]] == null) {
        _results.push(cursor = collection[chunks[i]] = {});
      } else {
        _results.push(cursor = collection[chunks[i]]);
      }
    } else {
      _results.push(cursor[chunks[i]] = value);
    }
  }
  return _results;
};

module.exports = function(projectDir, appDir, ext) {
  var app, assetFile, assets, chainware, config, dir, express, init, initialized, injector, injectors, load, loaded, mongoose, name, pkg, publicDir, relativeAppDir, relativeProjectDir, routed, router, swig, _ref, _ref1, _ref2;
  relativeProjectDir = path.relative(__dirname, projectDir);
  relativeAppDir = path.relative(__dirname, appDir);
  if (process.env.NODE_ENV == null) {
    process.env.NODE_ENV = 'development';
  }
  pkg = require(path.join(projectDir, 'package.json'));
  name = pkg.name;
  publicDir = path.join(projectDir, "public/" + name);
  dir = {
    project: projectDir,
    "public": publicDir,
    plugins: "" + projectDir + "/plugins",
    vhosts: "" + projectDir + "/vhosts",
    app: appDir
  };
  if (fs.existsSync("" + appDir + "/app" + ext)) {
    chainware = require("" + relativeAppDir + "/app");
  }
  injector = dependable.container();
  if (((_ref = pkg.dependencies) != null ? _ref['mongoose'] : void 0) != null) {
    mongoose = require("" + relativeProjectDir + "/node_modules/mongoose");
    injector.register('$mongoose', function() {
      return mongoose;
    });
  }
  if (((_ref1 = pkg.dependencies) != null ? _ref1['swig'] : void 0) != null) {
    swig = require("" + relativeProjectDir + "/node_modules/swig");
    injector.register('$swig', function() {
      return swig;
    });
  }
  if (((_ref2 = pkg.dependencies) != null ? _ref2['express'] : void 0) != null) {
    express = require("" + relativeProjectDir + "/node_modules/express");
    injector.register('$express', function() {
      return express;
    });
  }
  injector.register('$dependable', function() {
    return dependable;
  });
  injector.register('$glob', function() {
    return glob;
  });
  injector.register('$lodash', function() {
    return _;
  });
  injector.register('$injector', injector);
  injector.register('$env', process.env.NODE_ENV);
  injector.register('$dir', dir);
  injector.register('$pkg', pkg);
  injector.register('$ext', ext);
  injector.register('$name', name);
  injector.register('$assets', {
    js: {},
    css: {},
    other: {}
  });
  injector.register('$mount', '/', injector.register('$plugin', {
    register: function(plugin, shared) {
      var a, assets, injectors, k, pluginAssets, v, _ref3;
      if (fs.existsSync("" + plugin + ext)) {
        plugin = require("" + plugin + ext);
      } else if (fs.existsSync("" + plugin + ".js")) {
        plugin = require("" + plugin + ".js");
      } else {
        plugin = require(plugin);
      }
      if ((shared == null) || shared === true) {
        plugin.injector.register('__shared', true);
        if (mongoose != null) {
          plugin.injector.register('$connection', function() {
            return injector.get('$connection');
          });
          plugin.injector.register('$mongoose', function() {
            return injector.get('$mongoose');
          });
        }
      }
      assets = injector.get('$assets');
      pluginAssets = plugin.injector.get('$assets');
      if (pluginAssets[name] == null) {
        pluginAssets[name] = assets;
      }
      plugin.injector.register('$assets', pluginAssets);
      plugin.load();
      injectors = injector.get('$injectors');
      _ref3 = plugin.injector.get('$injectors');
      for (k in _ref3) {
        v = _ref3[k];
        if (injectors[k] == null) {
          injectors[k] = v;
        }
        if ((assets[k] == null) && k !== name) {
          a = v.get('$assets');
          if (a[name] != null) {
            delete a[name];
          }
          assets[k] = a;
        }
      }
    },
    get: function(plugin) {
      return injectors[plugin].get('$router');
    }
  }));
  injectors = {};
  injectors[name] = injector;
  injector.register('$injectors', injectors);
  injector.register('__shared', false);
  config = {};
  config.database = {};
  config.database.uri = 'mongodb://localhost/meanstackjs';
  config.database.options = {};
  config.secret = 'meanstackjs';
  config.mount = '/';
  config.port = 3000;
  config.router = {
    caseSensitive: false,
    strict: false
  };
  config["static"] = {};
  config["static"].expiry = 0;
  if (process.env.NODE_ENV === 'production') {
    config["static"].expiry = 1000 * 3600 * 24 * 365;
  }
  config.middleware = {};
  config.middleware['vhosted'] = true;
  config.middleware['compression'] = {
    threshold: 0,
    level: 9
  };
  config.middleware['cookie-parser'] = true;
  config.middleware['body-parser'] = true;
  config.middleware['express-validator'] = true;
  config.middleware['method-override'] = true;
  config.middleware['express-session'] = {
    key: 'sid'
  };
  config.middleware['connect-mongo'] = true;
  config.middleware['view-helpers'] = true;
  config.middleware['connect-flash'] = true;
  config.middleware['serve-favicon'] = false;
  config.middleware['errorhandler'] = true;
  if (process.env.NODE_ENV === 'production') {
    config.middleware['errorhandler'] = false;
  }
  config.views = {};
  config.views.dir = path.resolve("" + appDir + "/");
  if (process.env.NODE_ENV === 'production') {
    config.views.cache = true;
  } else {
    config.views.cache = false;
  }
  config.views.callback = function(html) {
    return html;
  };
  config.views.extension = 'html';
  injector.register('$config', config);
  if ((chainware != null ? chainware.config : void 0) != null) {
    injector.resolve(chainware.config);
  }
  if (config.mount[config.mount.length - 1] !== '/') {
    config.mount += '/';
  }
  assetFile = path.join(publicDir, 'assets.json');
  if (fs.existsSync(assetFile)) {
    assets = JSON.parse(fs.readFileSync(assetFile));
    injector.register('$assets', assets);
  }
  assets = injector.get('$assets');
  if (express != null) {
    app = express();
    injector.register('$app', function() {
      return app;
    });
    app.locals.assets = assets;
    app.locals.mount = config.mount;
    app.locals.name = name;
    router = express.Router(config.router);
    injector.register('$router', function() {
      return router;
    });
    injector.register('$route', function() {
      return express.Router(config.router);
    });
  }
  routed = false;
  injector.register('__route', function() {
    return function() {
      if (routed) {
        return;
      }
      routed = true;
      if ((chainware != null ? chainware.main : void 0) != null) {
        return injector.resolve(chainware.main);
      }
    };
  });
  loaded = false;
  load = function() {
    var connected, connection, emitter, engine, globDir, i, k, resolve, v, views, __shared;
    if (loaded) {
      return;
    }
    loaded = true;
    __shared = injector.get('__shared');
    if ((chainware != null ? chainware.load : void 0) != null) {
      injector.resolve(chainware.load);
    }
    if (config.middleware['cookie-parser']) {
      config.middleware['cookie-parser'] = config.secret;
    }
    if (config.middleware['express-session']) {
      config.middleware['express-session']['secret'] = config.secret;
    }
    emitter = new events.EventEmitter();
    injector.register('$emitter', function() {
      return emitter;
    });
    if (!__shared) {
      connected = function() {
        return emitter.emit('connected');
      };
      if (mongoose != null) {
        if (_.size(config.database.options) > 0) {
          connection = mongoose.createConnection(config.database.uri, config.database.options, connected);
        } else {
          connection = mongoose.createConnection(config.database.uri, connected);
        }
        injector.register('$connection', function() {
          return connection;
        });
      } else {
        connected();
      }
    }
    if (chainware != null ? chainware.plugins : void 0) {
      injector.resolve(chainware.plugins);
    }
    if (express != null) {
      if ((config.views.render == null) && (swig != null)) {
        if (config.views.cache) {
          engine = new swig.Swig({
            loader: swig.loaders.fs(config.views.dir),
            cache: 'memory'
          });
          app.locals.cache = 'memory';
        } else {
          engine = new swig.Swig({
            loader: swig.loaders.fs(config.views.dir),
            cache: false
          });
          app.locals.cache = false;
        }
        config.views.render = engine.renderFile;
      }
      if (config.views.render != null) {
        app.set('view cache', config.views.cache);
        app.set('views', config.views.dir);
        views = {};
        config.views = postrender(config.views, config.views.callback, 'render');
        app.set('view engine', config.views.extension);
        app.engine(config.views.extension, config.views.render);
        globDir = path.resolve("" + config.views.dir + "/**/*." + config.views.extension);
        glob(globDir, {
          sync: true
        }, function(err, files) {
          var file, renderer, _i, _len, _results;
          if (err) {
            console.log(err);
            process.exit(0);
          }
          _results = [];
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            file = files[_i];
            renderer = new Renderer(file, config.views.render, config.views.cache, app.locals);
            _results.push(aggregate(views, file, config.views.dir, renderer));
          }
          return _results;
        });
        for (k in injectors) {
          v = injectors[k];
          if (k !== name) {
            views[k] = v.get('$views');
          }
        }
        injector.register('$views', views);
      }
    }
    resolve = function(prop, key) {
      var args, construct, create, filter, get, i, match, overrides, r, singleton, wrap;
      filter = function(instance) {
        return instance;
      };
      wrap = function(instance) {
        return function() {
          return instance;
        };
      };
      get = function(instance) {
        return function() {
          var r;
          for (k in injectors) {
            v = injectors[k];
            if (instance.substring(0, k.length).replace('.', '-') === k) {
              r = instance.substring(k.length + 1);
              if (r.length > 0) {
                return v.get(r);
              }
            }
          }
          return injector.get(instance);
        };
      };
      construct = function(key, instance, args) {
        return function() {
          injector.register(key, construct(key, instance, args));
          return instance.construct(args);
        };
      };
      create = function(key, instance, args) {
        return function() {
          injector.register(key, create(key, instance, args));
          return injector.get(instance, args);
        };
      };
      if (prop.singleton != null) {
        singleton = prop.singleton;
      } else {
        singleton = true;
      }
      if (_.isFunction(prop)) {
        if ((prop.inject != null) || prop.name.length > 0) {
          overrides = {};
          match = prop.toString().match(/function.*?\(([\s\S]*?)\)/);
          if (match == null) {
            throw new Error("could not parse function arguments: " + (prop != null ? prop.toString() : void 0));
          }
          args = match[1].split(",").filter(filter).map(function(str) {
            return str.trim();
          });
          if (prop.inject == null) {
            prop.inject = args;
          }
          if (prop.name.length > 0) {
            prop.construct = function(a) {
              var fconstructor, nconstructor;
              fconstructor = prop;
              nconstructor = function() {
                return fconstructor.apply(this, a);
              };
              nconstructor.prototype = fconstructor.prototype;
              return new nconstructor();
            };
          }
          for (i in args) {
            r = args[i];
            overrides[r] = get(prop.inject[i]);
          }
        }
      }
      if (prop.inject != null) {
        if (prop.name.length > 0) {
          injector.register("__" + key, wrap(prop));
        } else {
          injector.register("__" + key, prop);
        }
        return injector.register(key, function() {
          var e, l, res;
          if (prop.name.length > 0) {
            args = [];
            for (l in overrides) {
              e = overrides[l];
              args.push(e());
            }
            if (singleton) {
              res = injector.get("__" + key).construct(args);
              injector.register(key, wrap(res));
            } else {
              res = construct(key, injector.get("__" + key), args)();
            }
          } else {
            for (l in overrides) {
              e = overrides[l];
              overrides[l] = e();
            }
            if (singleton) {
              res = injector.get("__" + key, overrides);
              injector.register(key, wrap(res));
            } else {
              res = create(key, "__" + key, overrides)();
            }
          }
          return res;
        });
      } else {
        if (singleton) {
          return injector.register(key, prop);
        } else {
          injector.register("__" + key, prop);
          return injector.register(key, function() {
            return create(key, "__" + key, {})();
          });
        }
      }
    };
    dir = path.resolve(appDir);
    glob("" + dir + "/**/*" + ext, {
      sync: true
    }, function(err, files) {
      var file, mdl, ns, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        if (path.relative(dir, file) === ("app" + ext)) {
          continue;
        }
        mdl = require(file);
        if (mdl.namespace != null) {
          ns = mdl.namespace;
        } else {
          ns = '';
        }
        if ((mdl.register != null) && mdl.register === false) {
          continue;
        }
        _results.push(_.forOwn(mdl, function(prop, key) {
          if ((prop.register != null) && prop.register === false) {
            return;
          }
          if (ns.length > 0) {
            key = "" + ns + "." + key;
          }
          if (prop.namespace != null) {
            key = "" + prop.namespace + "." + key;
          }
          return resolve(prop, key);
        }));
      }
      return _results;
    });
    for (k in injectors) {
      v = injectors[k];
      if (k !== name) {
        i = v.get('$injectors');
        i[name] = injector;
      }
    }
    if ((chainware != null ? chainware.init : void 0) != null) {
      return injector.resolve(chainware.init);
    }
  };
  initialized = false;
  init = function() {
    var cm, es, k, m, mount, store, v, _ref10, _ref11, _ref12, _ref13, _ref14, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    if (initialized) {
      return;
    }
    initialized = true;
    load();
    if (express == null) {
      return injector;
    }
    if ((((_ref3 = pkg.dependencies) != null ? _ref3['connect-mongo'] : void 0) != null) && (((_ref4 = pkg.dependencies) != null ? _ref4['express-session'] : void 0) != null)) {
      if (config.middleware['express-session'] && config.middleware['connect-mongo']) {
        if (_.isBoolean(config.middleware['connect-mongo'])) {
          config.middleware['connect-mongo'] = {};
        }
        config.middleware['connect-mongo']['db'] = injector.get('$connection').db;
        cm = require("" + relativeProjectDir + "/node_modules/connect-mongo");
        es = require("" + relativeProjectDir + "/node_modules/express-session");
        store = new (cm(es))(config.middleware['connect-mongo']);
        if (_.isBoolean(config.middleware['express-session'])) {
          config.middleware['express-session'] = {};
        }
        config.middleware['express-session']['store'] = store;
      }
    }
    if (config.router.strict) {
      app.enable('strict routing');
    }
    if (config.router.caseSensitive) {
      app.enable('case sensitive routing');
    }
    if ((chainware != null ? chainware.middleware : void 0) != null) {
      injector.resolve(chainware.middlware);
    }
    app.use(function(req, res, next) {
      res.removeHeader('X-Powered-By');
      return next();
    });
    if ((chainware != null ? chainware['compression'] : void 0) != null) {
      injector.resolve(chainware['compression']);
    }
    if ((((_ref5 = pkg.dependencies) != null ? _ref5['compression'] : void 0) != null) && config.middleware['compression']) {
      m = require("" + relativeProjectDir + "/node_modules/compression");
      if (!_.isBoolean(config.middleware['compression'])) {
        app.use(m(config.middleware['compression']));
      } else {
        app.use(m());
      }
    }
    if ((chainware != null ? chainware['serve-favicon'] : void 0) != null) {
      injector.resolve(chainware['compression']);
    }
    if ((((_ref6 = pkg.dependencies) != null ? _ref6['serve-favicon'] : void 0) != null) && config.middleware['serve-favicon']) {
      m = require("" + relativeProjectDir + "/node_modules/serve-favicon");
      if (!_.isBoolean(config.middleware['serve-favicon'])) {
        app.use(m("" + publicDir + "/favicon.ico", config.middleware['serve-favicon']));
      } else {
        app.use(m("" + publicDir + "/favicon.ico"));
      }
    }
    if ((chainware != null ? chainware["static"] : void 0) != null) {
      injector.resolve(chainware["static"]);
    }
    for (k in injectors) {
      v = injectors[k];
      dir = v.get('$dir');
      name = v.get('$name');
      app.use("/public/" + name, express["static"](dir["public"], {
        maxAge: config["static"].expiry
      }));
    }
    if ((chainware != null ? chainware['cookie-parser'] : void 0) != null) {
      injector.resolve(chainware['cookie-parser']);
    }
    if ((((_ref7 = pkg.dependencies) != null ? _ref7['cookie-parser'] : void 0) != null) && config.middleware['cookie-parser']) {
      m = require("" + relativeProjectDir + "/node_modules/cookie-parser");
      if (!_.isBoolean(config.middleware['cookie-parser'])) {
        app.use(m(config.middleware['cookie-parser']));
      } else {
        app.use(m());
      }
    }
    if ((chainware != null ? chainware['body-parser'] : void 0) != null) {
      injector.resolve(chainware['body-parser']);
    }
    if ((((_ref8 = pkg.dependencies) != null ? _ref8['body-parser'] : void 0) != null) && config.middleware['body-parser']) {
      m = require("" + relativeProjectDir + "/node_modules/body-parser");
      app.use(m());
    }
    if ((chainware != null ? chainware['express-validator'] : void 0) != null) {
      injector.resolve(chainware['express-validator']);
    }
    if ((((_ref9 = pkg.dependencies) != null ? _ref9['express-validator'] : void 0) != null) && config.middleware['express-validator']) {
      m = require("" + relativeProjectDir + "/node_modules/express-validator");
      if (!_.isBoolean(config.middleware['express-validator'])) {
        app.use(m(config.middleware['express-validator']));
      } else {
        app.use(m());
      }
    }
    if ((chainware != null ? chainware['method-override'] : void 0) != null) {
      injector.resolve(chainware['method-override']);
    }
    if ((((_ref10 = pkg.dependencies) != null ? _ref10['method-override'] : void 0) != null) && config.middleware['method-override']) {
      m = require("" + relativeProjectDir + "/node_modules/method-override");
      app.use(m());
    }
    if ((chainware != null ? chainware['express-session'] : void 0) != null) {
      injector.resolve(chainware['express-session']);
    }
    if ((((_ref11 = pkg.dependencies) != null ? _ref11['express-session'] : void 0) != null) && config.middleware['express-session']) {
      m = require("" + relativeProjectDir + "/node_modules/express-session");
      if (!_.isBoolean(config.middleware['express-session'])) {
        app.use(m(config.middleware['express-session']));
      } else {
        app.use(m());
      }
    }
    if ((chainware != null ? chainware['view-helpers'] : void 0) != null) {
      injector.resolve(chainware['view-helpers']);
    }
    if ((((_ref12 = pkg.dependencies) != null ? _ref12['view-helpers'] : void 0) != null) && config.middleware['view-helpers']) {
      m = require("" + relativeProjectDir + "/node_modules/view-helpers");
      app.use(m(name));
    }
    if ((chainware != null ? chainware['connect-flash'] : void 0) != null) {
      injector.resolve(chainware['connect-flash']);
    }
    if ((((_ref13 = pkg.dependencies) != null ? _ref13['connect-flash'] : void 0) != null) && config.middleware['connect-flash']) {
      m = require("" + relativeProjectDir + "/node_modules/connect-flash");
      app.use(m());
    }
    if ((chainware != null ? chainware.dependencies : void 0) != null) {
      injector.resolve(chainware.dependencies);
    }
    for (k in injectors) {
      v = injectors[k];
      v.get('__route')();
    }
    mount = injector.get('$mount');
    app.use(mount, injector.get('$router'));
    if ((chainware != null ? chainware['errorhandler'] : void 0) != null) {
      injector.resolve(chainware['errorhandler']);
    }
    if ((((_ref14 = pkg.dependencies) != null ? _ref14['errorhandler'] : void 0) != null) && config.middleware['errorhandler']) {
      m = require("" + relativeProjectDir + "/node_modules/errorhandler");
      app.use(m());
    }
    if ((chainware != null ? chainware.run : void 0) != null) {
      injector.resolve(chainware.run);
    }
    return injector;
  };
  return {
    injector: injector,
    load: load,
    init: init
  };
};

module.exports.server = function($dir, $ext, $config, $injector, $emitter, $env, $pkg) {
  var bootstrap, listen, relativeAppDir, server, vhosts, _ref;
  if (((_ref = $pkg.dependencies) != null ? _ref.express : void 0) == null) {
    return;
  }
  relativeAppDir = path.relative(__dirname, $dir.app);
  bootstrap = fs.existsSync("" + $dir.app + "/app" + $ext);
  if (bootstrap && (bootstrap.vhosts != null)) {
    server = $injector.get('$express')();
  } else {
    server = $injector.get('$app');
  }
  if ($config.router.strict) {
    server.enable('strict routing');
  }
  if ($config.router.caseSensitive) {
    server.enable('case sensitive routing');
  }
  if (bootstrap) {
    bootstrap = require("" + relativeAppDir + "/app");
  }
  if (bootstrap && (bootstrap.vhosts != null)) {
    vhosts = $injector.resolve(bootstrap.vhosts);
    server = vhosted(server, $dir.project, vhosts);
  }
  $injector.register('$server', function() {
    return server;
  });
  listen = function() {
    var http, port;
    if (bootstrap && (bootstrap.server != null)) {
      server = $injector.resolve(require("" + relativeAppDir + "/app").server);
    } else {
      http = require('http');
      port = process.env.PORT || $config.port;
      server = http.createServer(server).listen(port, function() {
        return console.log('Server listening on port ' + port);
      });
    }
    if (server != null) {
      return server.on('listening', function() {
        return fs.writeFileSync("" + $dir.project + "/.tmp/reload", 'reload');
      });
    }
  };
  if ($env === 'production') {
    return $emitter.on('connected', function() {
      return listen();
    });
  } else {
    return listen();
  }
};
