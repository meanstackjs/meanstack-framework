// Generated by CoffeeScript 1.7.1
var dependable, ect, express, fs, glob, path, postrender, utils, _;

express = require('express');

dependable = require('dependable');

postrender = require('express-postrender');

ect = require('ect');

path = require('path');

glob = require('glob');

fs = require('fs');

_ = require('lodash');

utils = require('./utils');

module.exports = function(projectdir, appdir, appext, mean, config) {
  var app, appname, assetfile, assets, chainware, defaults, dir, engine, globdir, overrides, pkg, plugin, plugins, publicdir, relappdir, relprojectdir, router, views;
  relprojectdir = path.relative(__dirname, projectdir);
  relappdir = path.relative(__dirname, appdir);
  publicdir = path.join(projectdir, 'public');
  if (config != null) {
    overrides = config;
  }
  pkg = require(path.join(projectdir, 'package.json'));
  appname = pkg.name;
  chainware = require("" + relappdir + "/chainware");
  dir = {
    project: projectdir,
    "public": publicdir,
    app: appdir
  };
  plugin = dependable.container();
  plugin.register('$plugin', plugin);
  plugin.register('$mean', mean);
  plugin.register('$env', process.env.NODE_ENV);
  plugin.register('$dir', dir);
  plugin.register('$ext', appext);
  plugin.register('$name', appname);
  plugin.register('$pkg', pkg);
  config = {};
  config.router = mean.get('$config').router;
  plugins = mean.get('$plugins');
  plugins[appname] = plugin;
  config.views = {};
  config.views.dir = path.resolve("" + appdir + "/views/");
  if (process.env.NODE_ENV === 'production') {
    config.views.cache = true;
  } else {
    config.views.cache = false;
  }
  config.views.callback = function(html) {
    return html;
  };
  config.views.extension = 'html';
  plugin.register('$config', config);
  if (chainware.config != null) {
    mean.resolve(chainware.config);
  }
  if (overrides != null) {
    defaults = _.partialRight(_.assign, function(a, b) {
      if (a == null) {
        return b;
      }
      return a;
    });
    config = defaults(overrides, config);
  }
  plugin.register('$connection', mean.get('$connection'));
  plugin.register('$mongoose', mean.get('$mongoose'));
  if (chainware.beforeApp != null) {
    plugin.resolve(chainware.beforeApp);
  }
  app = mean.get('$app');
  plugin.register('$app', function() {
    return app;
  });
  assetfile = path.join(projectdir, '.assets');
  if (fs.existsSync(assetfile)) {
    assets = JSON.parse(fs.readFileSync(assetfile));
  } else {
    assets = {
      js: {},
      css: {},
      other: {}
    };
  }
  mean.get('$assets')[appname] = assets;
  plugin.register('$assets', assets);
  if (config.views.engine == null) {
    if (config.views.cache) {
      engine = ect({
        watch: true,
        cache: true,
        root: config.views.dir
      });
    } else {
      engine = ect({
        watch: false,
        cache: false,
        root: config.views.dir
      });
    }
    config.views.render = engine.render;
  }
  views = {};
  config.views = postrender(config.views, config.views.callback, 'render');
  globdir = path.resolve("" + config.views.dir + "/**/*." + config.views.extension);
  glob(globdir, {
    sync: true
  }, function(err, files) {
    var file, renderer, _i, _len, _results;
    if (err) {
      console.log(err);
      process.exit(0);
    }
    _results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      renderer = new utils.Renderer(file, config.views.render, config.views.cache, app.locals);
      _results.push(utils.aggregate(views, file, config.views.dir, renderer));
    }
    return _results;
  });
  plugin.register('$views', views);
  dir = path.resolve("" + appdir + "/models");
  glob("" + appdir + "/models/**/*" + appext, {
    sync: true
  }, function(err, files) {
    var file, i, model, name, names, schema, _i, _len, _results;
    if (err) {
      console.log(err);
      process.exit(0);
    }
    names = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      name = path.basename(file).replace(path.extname(file), '').replace(/[-._]\w/g, function($1) {
        return $1[1].toUpperCase();
      });
      name = name[0].toUpperCase() + name.substr(1);
      names.push(name);
      schema = require(file).schema;
      plugin.register(name + 'Schema', schema);
    }
    for (i in files) {
      file = files[i];
      schema = plugin.get(names[i] + 'Schema');
      plugin.register(names[i] + 'Schema', function() {
        return schema;
      });
    }
    for (i in files) {
      file = files[i];
      model = require(file).model;
      plugin.register(names[i] + 'Model', model);
    }
    _results = [];
    for (i in files) {
      file = files[i];
      model = plugin.get(names[i] + 'Model');
      _results.push(plugin.register(names[i] + 'Model', function() {
        return model;
      }));
    }
    return _results;
  });
  dir = path.resolve("" + appdir + "/controllers");
  glob("" + appdir + "/controllers/**/*" + appext, {
    sync: true
  }, function(err, files) {
    var controller, file, i, name, names, _i, _len, _results;
    if (err) {
      console.log(err);
      process.exit(0);
    }
    names = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      name = path.basename(file).replace(path.extname(file), '').replace(/[-._]\w/g, function($1) {
        return $1[1].toUpperCase();
      });
      name = name[0].toUpperCase() + name.substr(1);
      names.push(name);
      controller = require(file);
      plugin.register(name + 'Ctrl', require(file));
    }
    _results = [];
    for (i in files) {
      file = files[i];
      controller = plugin.get(names[i] + 'Ctrl');
      _results.push(plugin.register(names[i] + 'Ctrl', function() {
        return controller;
      }));
    }
    return _results;
  });
  if (chainware.beforeRouting != null) {
    plugin.resolve(chainware.beforeRouting);
  }
  router = express.Router(config.router);
  plugin.register('$router', function() {
    return router;
  });
  glob("" + appdir + "/routes/**/*" + appext, {
    sync: true
  }, function(err, files) {
    var file, _i, _len, _results;
    if (err) {
      console.log(err);
      process.exit(0);
    }
    _results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      _results.push(plugin.resolve({
        '$route': express.Router(config.router)
      }, require(file)));
    }
    return _results;
  });
  if (chainware.afterRouting != null) {
    plugin.resolve(chainware.afterRouting);
  }
  if (chainware.afterApp != null) {
    plugin.resolve(chainware.afterApp);
  }
  return {
    router: router,
    appname: appname
  };
};

module.exports.grunt = function(projectdir, grunt) {
  return require('./grunt')(projectdir, grunt);
};
